import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
import os, sys, cv2
import argparse
import os.path as osp
import glob

this_dir = osp.dirname(__file__)
print(this_dir)

from lib.networks.factory import get_network
from lib.fast_rcnn.config import cfg
from lib.fast_rcnn.test import im_detect
from lib.fast_rcnn.nms_wrapper import nms
from lib.utils.timer import Timer

#CLASSES = ('__background__','aeroplane', 'bicycle', 'bird', 'boat', 'bottle', 'bus', 'car', 'cat', 'chair','cow', 'diningtable', 'dog', 'horse', 'motorbike', 'person', 'pottedplant', 'sheep', 'sofa', 'train', 'tvmonitor')


CLASSES = ('__background__','car')

def vis_detections(im, class_name, dets, thresh=0.5):  # (im, class_name, dets, ax, thresh=0.5):
    """Draw detected bounding boxes."""
    inds = np.where(dets[:, -1] >= thresh)[0]
    if len(inds) == 0:
        return

    for i in inds:
        bbox = dets[i, :4]
        score = dets[i, -1]
        bbox[0], bbox[1], bbox[2], bbox[3] = map(int, [bbox[0], bbox[1], bbox[2], bbox[3]])
        cv2.rectangle(im, (bbox[0], bbox[1]), (bbox[2], bbox[3]), (255, 0, 0), 3)
        # ax.add_patch(
            #plt.Rectangle((bbox[0], bbox[1]),
              #            bbox[2] - bbox[0],
                #          bbox[3] - bbox[1], fill=False,
                  #        edgecolor='red', linewidth=3.5)
        #)
        cv2.rectangle(im, (bbox[0], int(bbox[1] - 15)), (int(bbox[0] + 85), bbox[1]), (255, 255, 255), thickness=-1)
        font = cv2.FONT_HERSHEY_SIMPLEX
        cv2.putText(im, '{:s} {:.3f}'.format(class_name, score), (bbox[0], int(bbox[1] - 2)), font, 0.45, (0, 0, 0))
        #ax.text(bbox[0], bbox[1] - 2,
          #      '{:s} {:.3f}'.format(class_name, score),
            #    bbox=dict(facecolor='blue', alpha=0.5),
              #  fontsize=14, color='white')

    #ax.set_title(('{} detections with '
      #            'p({} | box) >= {:.1f}').format(class_name, class_name,
        #                                          thresh),
          #       fontsize=14)
    # plt.axis('off')
    # plt.tight_layout()
    # plt.draw()


def detect(sess, net, im):
    """Detect object classes in an image using pre-computed object proposals."""

    # Load the demo image
    #im = cv2.imread(image_name)

    # Detect all object classes and regress object bounds
    timer = Timer()
    timer.tic()
    scores, boxes = im_detect(sess, net, im)
    timer.toc()
    print ('Detection took {:.3f}s for '
           '{:d} object proposals').format(timer.total_time, boxes.shape[0])

    # Visualize detections for each class
    # im = im[:, :, (2, 1, 0)]
    # fig, ax = plt.subplots(figsize=(12, 12))
    # ax.imshow(im, aspect='equal')

    CONF_THRESH = 0.8
    NMS_THRESH = 0.3
    for cls_ind, cls in enumerate(CLASSES[1:]):
        cls_ind += 1  # because we skipped background
        cls_boxes = boxes[:, 4 * cls_ind:4 * (cls_ind + 1)]
        cls_scores = scores[:, cls_ind]
        dets = np.hstack((cls_boxes,
                          cls_scores[:, np.newaxis])).astype(np.float32)
        keep = nms(dets, NMS_THRESH)
        dets = dets[keep, :]
        vis_detections(im, cls, dets, thresh=CONF_THRESH)


def parse_args():
    """Parse input arguments."""
    parser = argparse.ArgumentParser(description='Faster R-CNN demo')
    parser.add_argument('--gpu', dest='gpu_id', help='GPU device id to use [0]',
                        default=0, type=int)
    parser.add_argument('--cpu', dest='cpu_mode',
                        help='Use CPU mode (overrides --gpu)',
                        action='store_true')
    parser.add_argument('--net', dest='demo_net', help='Network to use [vgg16]',
                        default='VGGnet_test')
    parser.add_argument('--model', dest='model', help='Model path',
                        default=' ')

    args = parser.parse_args()

    return args


if __name__ == '__main__':
    cfg.TEST.HAS_RPN = True  # Use RPN for proposals

    args = parse_args()

    if args.model == ' ' or not os.path.exists(args.model):
        print ('current path is ' + os.path.abspath(__file__))
        raise IOError(('Error: Model not found.\n'))

    # init session
    sess = tf.Session(config=tf.ConfigProto(allow_soft_placement=True))
    # load network
    net = get_network(args.demo_net)
    # load model
    print ('Loading network {:s}... '.format(args.demo_net)),
    saver = tf.train.Saver()
    saver.restore(sess, args.model)
    print (' done.')

    # Warmup on a dummy image
    im = 128 * np.ones((300, 300, 3), dtype=np.uint8)
    for i in xrange(2):
        _, _ = im_detect(sess, net, im)

    vd_name = os.path.join(cfg.DATA_DIR, 'demo', 'video.mp4')
    write = os.path.join(cfg.DATA_DIR, 'test', 'first.mp4')
               # + glob.glob(os.path.join(cfg.DATA_DIR, 'demo', '*.jpg'))

    print '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
    print 'Detection for {:s}'.format(vd_name)
    videocapture=cv2.VideoCapture()
    videocapture.open(vd_name)
    fps = videocapture.get(cv2.CAP_PROP_FPS)
    frames = videocapture.get(cv2.CAP_PROP_FRAME_COUNT)
    size = (int(videocapture.get(cv2.CAP_PROP_FRAME_WIDTH)),
            int(videocapture.get(cv2.CAP_PROP_FRAME_HEIGHT)))
    fourcc = cv2.VideoWriter_fourcc('M', 'J', 'P', 'G')
    videoWriter = cv2.VideoWriter('/home/cqu/anaconda3/envs/tensorlfowpy2/TFFRCNN-master/test/first.avi',\
                                      fourcc, fps, size)
    print('fps=', fps, 'frames=', frames, 'size', size)
    for i in range(int(frames)):
        ret, im = videocapture.read()
        if ret:
            detect(sess, net, im)
            cv2.imshow('video', im)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
            #cv2.imwrite("/home/cqu/anaconda3/envs/tensorlfowpy2/TFFRCNN-master/test/1-1.avi(%d).jpg" % i, im)
            videoWriter.write(im)
        else:
            break
    print('done')
    videocapture.release()

